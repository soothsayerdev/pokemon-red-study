// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockpokemon creates a new instance of Mockpokemon. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockpokemon(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mockpokemon {
	mock := &Mockpokemon{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Mockpokemon is an autogenerated mock type for the pokemon type
type Mockpokemon struct {
	mock.Mock
}

type Mockpokemon_Expecter struct {
	mock *mock.Mock
}

func (_m *Mockpokemon) EXPECT() *Mockpokemon_Expecter {
	return &Mockpokemon_Expecter{mock: &_m.Mock}
}

// Attack provides a mock function for the type Mockpokemon
func (_mock *Mockpokemon) Attack() {
	_mock.Called()
	return
}

// Mockpokemon_Attack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Attack'
type Mockpokemon_Attack_Call struct {
	*mock.Call
}

// Attack is a helper method to define mock.On call
func (_e *Mockpokemon_Expecter) Attack() *Mockpokemon_Attack_Call {
	return &Mockpokemon_Attack_Call{Call: _e.mock.On("Attack")}
}

func (_c *Mockpokemon_Attack_Call) Run(run func()) *Mockpokemon_Attack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Mockpokemon_Attack_Call) Return() *Mockpokemon_Attack_Call {
	_c.Call.Return()
	return _c
}

func (_c *Mockpokemon_Attack_Call) RunAndReturn(run func()) *Mockpokemon_Attack_Call {
	_c.Run(run)
	return _c
}

// Level provides a mock function for the type Mockpokemon
func (_mock *Mockpokemon) Level() int {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Level")
	}

	var r0 int
	if returnFunc, ok := ret.Get(0).(func() int); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int)
	}
	return r0
}

// Mockpokemon_Level_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Level'
type Mockpokemon_Level_Call struct {
	*mock.Call
}

// Level is a helper method to define mock.On call
func (_e *Mockpokemon_Expecter) Level() *Mockpokemon_Level_Call {
	return &Mockpokemon_Level_Call{Call: _e.mock.On("Level")}
}

func (_c *Mockpokemon_Level_Call) Run(run func()) *Mockpokemon_Level_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Mockpokemon_Level_Call) Return(n int) *Mockpokemon_Level_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *Mockpokemon_Level_Call) RunAndReturn(run func() int) *Mockpokemon_Level_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function for the type Mockpokemon
func (_mock *Mockpokemon) Name() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// Mockpokemon_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type Mockpokemon_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *Mockpokemon_Expecter) Name() *Mockpokemon_Name_Call {
	return &Mockpokemon_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *Mockpokemon_Name_Call) Run(run func()) *Mockpokemon_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Mockpokemon_Name_Call) Return(s string) *Mockpokemon_Name_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *Mockpokemon_Name_Call) RunAndReturn(run func() string) *Mockpokemon_Name_Call {
	_c.Call.Return(run)
	return _c
}
