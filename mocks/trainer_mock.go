// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"pokemon-red-study/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// NewMocktrainer creates a new instance of Mocktrainer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMocktrainer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mocktrainer {
	mock := &Mocktrainer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Mocktrainer is an autogenerated mock type for the trainer type
type Mocktrainer struct {
	mock.Mock
}

type Mocktrainer_Expecter struct {
	mock *mock.Mock
}

func (_m *Mocktrainer) EXPECT() *Mocktrainer_Expecter {
	return &Mocktrainer_Expecter{mock: &_m.Mock}
}

// ListPokemons provides a mock function for the type Mocktrainer
func (_mock *Mocktrainer) ListPokemons() []model.PokemonDTO {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListPokemons")
	}

	var r0 []model.PokemonDTO
	if returnFunc, ok := ret.Get(0).(func() []model.PokemonDTO); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.PokemonDTO)
		}
	}
	return r0
}

// Mocktrainer_ListPokemons_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPokemons'
type Mocktrainer_ListPokemons_Call struct {
	*mock.Call
}

// ListPokemons is a helper method to define mock.On call
func (_e *Mocktrainer_Expecter) ListPokemons() *Mocktrainer_ListPokemons_Call {
	return &Mocktrainer_ListPokemons_Call{Call: _e.mock.On("ListPokemons")}
}

func (_c *Mocktrainer_ListPokemons_Call) Run(run func()) *Mocktrainer_ListPokemons_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Mocktrainer_ListPokemons_Call) Return(pokemons []model.PokemonDTO) *Mocktrainer_ListPokemons_Call {
	_c.Call.Return(pokemons)
	return _c
}

func (_c *Mocktrainer_ListPokemons_Call) RunAndReturn(run func() []model.PokemonDTO) *Mocktrainer_ListPokemons_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function for the type Mocktrainer
func (_mock *Mocktrainer) Name() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// Mocktrainer_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type Mocktrainer_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *Mocktrainer_Expecter) Name() *Mocktrainer_Name_Call {
	return &Mocktrainer_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *Mocktrainer_Name_Call) Run(run func()) *Mocktrainer_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Mocktrainer_Name_Call) Return(s string) *Mocktrainer_Name_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *Mocktrainer_Name_Call) RunAndReturn(run func() string) *Mocktrainer_Name_Call {
	_c.Call.Return(run)
	return _c
}
